//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player Controller"",
            ""id"": ""9f8a147f-72ed-4e45-a3b2-577bfe0f0a4f"",
            ""actions"": [
                {
                    ""name"": ""SteeringMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bf90f833-db46-4344-8a89-11c0992047d7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DriveForward"",
                    ""type"": ""Button"",
                    ""id"": ""816c7c82-2ca9-46ae-8619-23f31eddb2e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DriveBackward"",
                    ""type"": ""Button"",
                    ""id"": ""9e4c1231-48d4-4360-84c8-d269742ab52c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseAbility"",
                    ""type"": ""Button"",
                    ""id"": ""089c7356-da80-411b-8d7b-a56ca4e68294"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Discard"",
                    ""type"": ""Button"",
                    ""id"": ""a09da6fa-26cb-4a89-93a4-9bca814f589b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LaunchAttack"",
                    ""type"": ""Button"",
                    ""id"": ""e483e7f1-d4af-4308-b60f-f4a25abb7570"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9417e385-af63-46db-81bc-95144b7849eb"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SteeringMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d5d466c-2a1e-449d-b6d8-88d4013e3f95"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""DriveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d93b486e-feb4-4b3e-9264-8eef08b946a3"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""DriveBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d24346a1-8af2-4f42-b2a2-afbe22afbef9"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""UseAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da0a9929-07c8-4b24-ba4d-32442b0cc97f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Discard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3aa180ca-8058-4f69-9e57-9554aa5cc38e"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""LaunchAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu Controller"",
            ""id"": ""2cba6314-6ed9-4b53-ad2c-9a043c3eedb0"",
            ""actions"": [
                {
                    ""name"": ""ChangeColorDown"",
                    ""type"": ""Button"",
                    ""id"": ""0fbeb7dd-6652-46d2-ab9e-d0b7760db4eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeColorUp"",
                    ""type"": ""Button"",
                    ""id"": ""7a0319fb-2bf0-44f1-8627-052157ef458b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeCarLeft"",
                    ""type"": ""Button"",
                    ""id"": ""272cc0c3-7b06-40a0-8d77-536028428bb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeCarRight"",
                    ""type"": ""Button"",
                    ""id"": ""2f6a7abc-99fc-493b-83ab-439e4f015326"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""b5ef1fb0-e890-4aef-9864-add112cfc20c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""9a131631-bb15-4346-a103-b8dffec6ba68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d525d7a4-614b-4cbd-9071-d5ee346d6a03"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85d94a0d-2512-4bd1-9753-e9c01e7ebfd3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdd261be-88af-4d46-9f87-aac2071c4bb3"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ChangeCarLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efc32192-8a1a-4ac1-862d-5c53f468fc18"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ChangeColorDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e63a9ce8-df86-420c-9c96-e521e9a6210c"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeColorUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bc0713d-885d-45c9-811f-6af96b503e6a"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCarRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""End Controller"",
            ""id"": ""b9f0aecc-c1d7-48c0-bb55-6a60cec8a140"",
            ""actions"": [
                {
                    ""name"": ""GoBack"",
                    ""type"": ""Button"",
                    ""id"": ""7dc717d9-c08e-47d2-95f2-9dd763ac6601"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b56b57e3-ca70-41d5-8733-fc3ac7c3d253"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player Controller
        m_PlayerController = asset.FindActionMap("Player Controller", throwIfNotFound: true);
        m_PlayerController_SteeringMovement = m_PlayerController.FindAction("SteeringMovement", throwIfNotFound: true);
        m_PlayerController_DriveForward = m_PlayerController.FindAction("DriveForward", throwIfNotFound: true);
        m_PlayerController_DriveBackward = m_PlayerController.FindAction("DriveBackward", throwIfNotFound: true);
        m_PlayerController_UseAbility = m_PlayerController.FindAction("UseAbility", throwIfNotFound: true);
        m_PlayerController_Discard = m_PlayerController.FindAction("Discard", throwIfNotFound: true);
        m_PlayerController_LaunchAttack = m_PlayerController.FindAction("LaunchAttack", throwIfNotFound: true);
        // Menu Controller
        m_MenuController = asset.FindActionMap("Menu Controller", throwIfNotFound: true);
        m_MenuController_ChangeColorDown = m_MenuController.FindAction("ChangeColorDown", throwIfNotFound: true);
        m_MenuController_ChangeColorUp = m_MenuController.FindAction("ChangeColorUp", throwIfNotFound: true);
        m_MenuController_ChangeCarLeft = m_MenuController.FindAction("ChangeCarLeft", throwIfNotFound: true);
        m_MenuController_ChangeCarRight = m_MenuController.FindAction("ChangeCarRight", throwIfNotFound: true);
        m_MenuController_Confirm = m_MenuController.FindAction("Confirm", throwIfNotFound: true);
        m_MenuController_Cancel = m_MenuController.FindAction("Cancel", throwIfNotFound: true);
        // End Controller
        m_EndController = asset.FindActionMap("End Controller", throwIfNotFound: true);
        m_EndController_GoBack = m_EndController.FindAction("GoBack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Controller
    private readonly InputActionMap m_PlayerController;
    private IPlayerControllerActions m_PlayerControllerActionsCallbackInterface;
    private readonly InputAction m_PlayerController_SteeringMovement;
    private readonly InputAction m_PlayerController_DriveForward;
    private readonly InputAction m_PlayerController_DriveBackward;
    private readonly InputAction m_PlayerController_UseAbility;
    private readonly InputAction m_PlayerController_Discard;
    private readonly InputAction m_PlayerController_LaunchAttack;
    public struct PlayerControllerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerControllerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SteeringMovement => m_Wrapper.m_PlayerController_SteeringMovement;
        public InputAction @DriveForward => m_Wrapper.m_PlayerController_DriveForward;
        public InputAction @DriveBackward => m_Wrapper.m_PlayerController_DriveBackward;
        public InputAction @UseAbility => m_Wrapper.m_PlayerController_UseAbility;
        public InputAction @Discard => m_Wrapper.m_PlayerController_Discard;
        public InputAction @LaunchAttack => m_Wrapper.m_PlayerController_LaunchAttack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControllerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControllerActions instance)
        {
            if (m_Wrapper.m_PlayerControllerActionsCallbackInterface != null)
            {
                @SteeringMovement.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSteeringMovement;
                @SteeringMovement.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSteeringMovement;
                @SteeringMovement.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSteeringMovement;
                @DriveForward.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnDriveForward;
                @DriveForward.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnDriveForward;
                @DriveForward.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnDriveForward;
                @DriveBackward.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnDriveBackward;
                @DriveBackward.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnDriveBackward;
                @DriveBackward.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnDriveBackward;
                @UseAbility.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnUseAbility;
                @UseAbility.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnUseAbility;
                @UseAbility.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnUseAbility;
                @Discard.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnDiscard;
                @Discard.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnDiscard;
                @Discard.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnDiscard;
                @LaunchAttack.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnLaunchAttack;
                @LaunchAttack.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnLaunchAttack;
                @LaunchAttack.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnLaunchAttack;
            }
            m_Wrapper.m_PlayerControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SteeringMovement.started += instance.OnSteeringMovement;
                @SteeringMovement.performed += instance.OnSteeringMovement;
                @SteeringMovement.canceled += instance.OnSteeringMovement;
                @DriveForward.started += instance.OnDriveForward;
                @DriveForward.performed += instance.OnDriveForward;
                @DriveForward.canceled += instance.OnDriveForward;
                @DriveBackward.started += instance.OnDriveBackward;
                @DriveBackward.performed += instance.OnDriveBackward;
                @DriveBackward.canceled += instance.OnDriveBackward;
                @UseAbility.started += instance.OnUseAbility;
                @UseAbility.performed += instance.OnUseAbility;
                @UseAbility.canceled += instance.OnUseAbility;
                @Discard.started += instance.OnDiscard;
                @Discard.performed += instance.OnDiscard;
                @Discard.canceled += instance.OnDiscard;
                @LaunchAttack.started += instance.OnLaunchAttack;
                @LaunchAttack.performed += instance.OnLaunchAttack;
                @LaunchAttack.canceled += instance.OnLaunchAttack;
            }
        }
    }
    public PlayerControllerActions @PlayerController => new PlayerControllerActions(this);

    // Menu Controller
    private readonly InputActionMap m_MenuController;
    private IMenuControllerActions m_MenuControllerActionsCallbackInterface;
    private readonly InputAction m_MenuController_ChangeColorDown;
    private readonly InputAction m_MenuController_ChangeColorUp;
    private readonly InputAction m_MenuController_ChangeCarLeft;
    private readonly InputAction m_MenuController_ChangeCarRight;
    private readonly InputAction m_MenuController_Confirm;
    private readonly InputAction m_MenuController_Cancel;
    public struct MenuControllerActions
    {
        private @PlayerControls m_Wrapper;
        public MenuControllerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeColorDown => m_Wrapper.m_MenuController_ChangeColorDown;
        public InputAction @ChangeColorUp => m_Wrapper.m_MenuController_ChangeColorUp;
        public InputAction @ChangeCarLeft => m_Wrapper.m_MenuController_ChangeCarLeft;
        public InputAction @ChangeCarRight => m_Wrapper.m_MenuController_ChangeCarRight;
        public InputAction @Confirm => m_Wrapper.m_MenuController_Confirm;
        public InputAction @Cancel => m_Wrapper.m_MenuController_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_MenuController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuControllerActions set) { return set.Get(); }
        public void SetCallbacks(IMenuControllerActions instance)
        {
            if (m_Wrapper.m_MenuControllerActionsCallbackInterface != null)
            {
                @ChangeColorDown.started -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnChangeColorDown;
                @ChangeColorDown.performed -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnChangeColorDown;
                @ChangeColorDown.canceled -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnChangeColorDown;
                @ChangeColorUp.started -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnChangeColorUp;
                @ChangeColorUp.performed -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnChangeColorUp;
                @ChangeColorUp.canceled -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnChangeColorUp;
                @ChangeCarLeft.started -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnChangeCarLeft;
                @ChangeCarLeft.performed -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnChangeCarLeft;
                @ChangeCarLeft.canceled -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnChangeCarLeft;
                @ChangeCarRight.started -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnChangeCarRight;
                @ChangeCarRight.performed -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnChangeCarRight;
                @ChangeCarRight.canceled -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnChangeCarRight;
                @Confirm.started -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnConfirm;
                @Confirm.performed -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnConfirm;
                @Confirm.canceled -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnConfirm;
                @Cancel.started -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_MenuControllerActionsCallbackInterface.OnCancel;
            }
            m_Wrapper.m_MenuControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeColorDown.started += instance.OnChangeColorDown;
                @ChangeColorDown.performed += instance.OnChangeColorDown;
                @ChangeColorDown.canceled += instance.OnChangeColorDown;
                @ChangeColorUp.started += instance.OnChangeColorUp;
                @ChangeColorUp.performed += instance.OnChangeColorUp;
                @ChangeColorUp.canceled += instance.OnChangeColorUp;
                @ChangeCarLeft.started += instance.OnChangeCarLeft;
                @ChangeCarLeft.performed += instance.OnChangeCarLeft;
                @ChangeCarLeft.canceled += instance.OnChangeCarLeft;
                @ChangeCarRight.started += instance.OnChangeCarRight;
                @ChangeCarRight.performed += instance.OnChangeCarRight;
                @ChangeCarRight.canceled += instance.OnChangeCarRight;
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }
        }
    }
    public MenuControllerActions @MenuController => new MenuControllerActions(this);

    // End Controller
    private readonly InputActionMap m_EndController;
    private IEndControllerActions m_EndControllerActionsCallbackInterface;
    private readonly InputAction m_EndController_GoBack;
    public struct EndControllerActions
    {
        private @PlayerControls m_Wrapper;
        public EndControllerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @GoBack => m_Wrapper.m_EndController_GoBack;
        public InputActionMap Get() { return m_Wrapper.m_EndController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EndControllerActions set) { return set.Get(); }
        public void SetCallbacks(IEndControllerActions instance)
        {
            if (m_Wrapper.m_EndControllerActionsCallbackInterface != null)
            {
                @GoBack.started -= m_Wrapper.m_EndControllerActionsCallbackInterface.OnGoBack;
                @GoBack.performed -= m_Wrapper.m_EndControllerActionsCallbackInterface.OnGoBack;
                @GoBack.canceled -= m_Wrapper.m_EndControllerActionsCallbackInterface.OnGoBack;
            }
            m_Wrapper.m_EndControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GoBack.started += instance.OnGoBack;
                @GoBack.performed += instance.OnGoBack;
                @GoBack.canceled += instance.OnGoBack;
            }
        }
    }
    public EndControllerActions @EndController => new EndControllerActions(this);
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IPlayerControllerActions
    {
        void OnSteeringMovement(InputAction.CallbackContext context);
        void OnDriveForward(InputAction.CallbackContext context);
        void OnDriveBackward(InputAction.CallbackContext context);
        void OnUseAbility(InputAction.CallbackContext context);
        void OnDiscard(InputAction.CallbackContext context);
        void OnLaunchAttack(InputAction.CallbackContext context);
    }
    public interface IMenuControllerActions
    {
        void OnChangeColorDown(InputAction.CallbackContext context);
        void OnChangeColorUp(InputAction.CallbackContext context);
        void OnChangeCarLeft(InputAction.CallbackContext context);
        void OnChangeCarRight(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
    public interface IEndControllerActions
    {
        void OnGoBack(InputAction.CallbackContext context);
    }
}
